#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include "images.h"
#include <Wire.h>
#include <HT_SSD1306Wire.h>

#define BLE_DEVICE_NAME "ESP32 BLE Sensor Server"
#define BLE_SERVICE_UUID "f6fb45ea-8102-42c4-8cfb-ac5be07f5dbe"             // Generated by https://www.uuidgenerator.net/
#define BLE_TANK1CHARACTERISTIC_UUID "1e424618-a1f2-4a35-a6c3-3b65997badbe" // Generated by https://www.uuidgenerator.net/
// #define BLE_TANK1DESCRIPTOR_UUID "2ff8c54a-1d1f-4289-9885-2e9d0b6d4c53" // Generated by https://www.uuidgenerator.net/
#define BLE_TANK2CHARACTERISTIC_UUID "d167981d-6a98-4be3-adf9-d90a0dfc56b7" // Generated by https://www.uuidgenerator.net/
// #define BLE_TANK2DESCRIPTOR_UUID "1d499af2-deee-4d3a-a3be-f1df1633a875" // Generated by https://www.uuidgenerator.net/

bool deviceConnected = false;
double sensorValue1 = 0;
double sensorValue2 = 0;
double sensorValue3 = 0;
double sensorValue4 = 0;

uint8_t LED_PIN = 35;
BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristicTank1 = NULL;
BLEDescriptor *pDescrTank1;
BLE2902 *pBLE2902Tank1;
BLECharacteristic *pCharacteristicTank2 = NULL;
BLEDescriptor *pDescrTank2;
BLE2902 *pBLE2902Tank2;
SSD1306Wire display(0x3c, 500000, SDA_OLED, SCL_OLED, GEOMETRY_128_64, RST_OLED); // addr , freq , i2c group , resolution , rst

class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
    display.drawXbm(128 - BT_width, 0, BT_width, BT_height, (const unsigned char *)BT_bits);
    display.display();
    Serial.println("Device connected!");
  };

  void onDisconnect(BLEServer *pServer)
  {
    Serial.println("Device disconnected");
    deviceConnected = false;
    display.setColor(INVERSE);
    display.drawXbm(128 - BT_width, 0, BT_width, BT_height, (const unsigned char *)BT_bits);
    display.display();
    display.setColor(INVERSE);
    delay(500);                  // give the bluetooth stack the chance to get things ready
    pServer->startAdvertising(); // restart advertising
    Serial.println("Re-start advertising " + String(BLE_DEVICE_NAME) + "...");
  }
};

void setupBLE()
{
  Serial.println("Setting up BLE...");
  BLEDevice::init(BLE_DEVICE_NAME);
  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer->createService(BLE_SERVICE_UUID);

  // Create a BLE Characteristic
  pCharacteristicTank1 = pService->createCharacteristic(BLE_TANK1CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);
  // pDescrTank1 = new BLEDescriptor((uint16_t)0x2901);
  // pDescrTank1->setValue("Tank 1 Level in percentage");
  // pCharacteristicTank1->addDescriptor(pDescrTank1);
  pBLE2902Tank1 = new BLE2902();
  pBLE2902Tank1->setNotifications(true);
  pCharacteristicTank1->addDescriptor(pBLE2902Tank1);

  pCharacteristicTank2 = pService->createCharacteristic(BLE_TANK2CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY);
  // pDescrTank2 = new BLEDescriptor((uint16_t)0x2901);
  // pDescrTank2->setValue("Tank 2 Level in percentage");
  // pCharacteristicTank2->addDescriptor(pDescrTank2);
  pBLE2902Tank2 = new BLE2902();
  pBLE2902Tank2->setNotifications(true);
  pCharacteristicTank2->addDescriptor(pBLE2902Tank2);

  // Start the service
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(BLE_SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  // pAdvertising->setMinPreferred(0x06); // functions that help with iPhone connections issue
  // pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();

  Serial.println("BLE Setup Done. Started advertising " + String(BLE_DEVICE_NAME) + "...");
}

void SendSensorValue(BLECharacteristic *pCharacteristic, double value)
{
  pCharacteristic->setValue(value);
  pCharacteristic->notify();
  // digitalWrite(LED_PIN, HIGH);
  // delay(50);
  // digitalWrite(LED_PIN, LOW);
  Serial.println("Sending value: " + String(value) + " to client for characteristic: " + pCharacteristic->getUUID().toString().c_str());
}

void setup()
{
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  setupDisplay();
  setupBLE();
}

void setupDisplay()
{
  display.init();
  display.clear();
  display.display();
  display.setFont(ArialMT_Plain_16);
  display.drawString(0, 0, "Setting up BLE Sensor Server!");
  display.display();
}

void updateDisplay()
{
  display.clear();
  display.drawString(0, 0, "Vatten: " + String(sensorValue1, 0) + "%");
  display.drawString(0, 16, "Septik: " + String(sensorValue2, 0) + "%");
  display.drawString(0, 32, "Temp: " + String(sensorValue3, 0) + "%");
  display.drawString(0, 48, "Fukt: " + String(sensorValue4, 0) + "%");
  if (deviceConnected)
  {
    display.drawXbm(128 - BT_width, 0, BT_width, BT_height, (const unsigned char *)BT_bits);
  }
  display.display();
}

// put your main code here, to run repeatedly:
void loop()
{
  delay(2000);

  sensorValue1 = random(0, 10000) / 100.0;
  sensorValue2 = random(0, 10000) / 100.0;
  updateDisplay();

  if (deviceConnected)
  {
    SendSensorValue(pCharacteristicTank1, sensorValue1);
    delay(1000); // bluetooth stack will go into congestion, if too many packets are sent
    SendSensorValue(pCharacteristicTank2, sensorValue2);
    delay(1000); // bluetooth stack will go into congestion, if too many packets are sent
  }
  else
  {
    Serial.println("Waiting for connection...");
  }
}