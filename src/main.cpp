#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

#define BLE_DEVICE_NAME "ESP32 BLE Sensor Server"
#define BLE_SERVICE_UUID "f6fb45ea-8102-42c4-8cfb-ac5be07f5dbe"             // Generated by https://www.uuidgenerator.net/
#define BLE_TANK1CHARACTERISTIC_UUID "1e424618-a1f2-4a35-a6c3-3b65997badbe" // Generated by https://www.uuidgenerator.net/
#define BLE_TANK2CHARACTERISTIC_UUID "d167981d-6a98-4be3-adf9-d90a0dfc56b7" // Generated by https://www.uuidgenerator.net/

uint8_t LED_PIN = 35;
BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristicTank1Percentage = NULL;
BLECharacteristic *pCharacteristicTank2Percentage = NULL;
bool deviceConnected = false;

class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
    digitalWrite(LED_PIN, HIGH);
    Serial.println("Device connected!");
  };

  void onDisconnect(BLEServer *pServer)
  {
    deviceConnected = false;
    digitalWrite(LED_PIN, LOW);
    Serial.println("Device disconnected");

    delay(500);                  // give the bluetooth stack the chance to get things ready
    pServer->startAdvertising(); // restart advertising
    Serial.println("Re-start advertising " + String(BLE_DEVICE_NAME) + "...");
  }
};

void setupBLE()
{
  Serial.println("Setting up BLE...");
  BLEDevice::init(BLE_DEVICE_NAME);
  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer->createService(BLE_SERVICE_UUID);

  // Create a BLE Characteristic
  pCharacteristicTank1Percentage = pService->createCharacteristic(BLE_TANK1CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ);
  pCharacteristicTank1Percentage->addDescriptor(new BLE2902());

  pCharacteristicTank2Percentage = pService->createCharacteristic(BLE_TANK2CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ);
  pCharacteristicTank2Percentage->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(BLE_SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x06); // functions that help with iPhone connections issue
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  Serial.println("BLE Setup Done. Waiting for connections to " + String(BLE_DEVICE_NAME) + "...");
}

void setup()
{
  Serial.begin(9600);
  pinMode(LED_PIN, OUTPUT);
  setupBLE();
}

// put your main code here, to run repeatedly:
void loop()
{
  if (deviceConnected)
  {
    double tank1Percentage = 23.4; // simulate tank level
    pCharacteristicTank1Percentage->setValue(tank1Percentage);
    Serial.println("Updated: Tank 1 level = " + String(tank1Percentage) + "%");

    double tank2Percentage = 95.4; // simulate tank level
    pCharacteristicTank2Percentage->setValue(tank2Percentage);
    Serial.println("Updated: Tank 2 level = " + String(tank2Percentage) + "%");
  }
  Serial.println("Waiting for new sensor data...");
  delay(5000); // bluetooth stack will go into congestion, if too many packets are sent
}